I can certainly say that this was a fairly unique problem that I was not familiar with. Even though my solution is not particularly long, the question really forced me to think and explore concepts that were new to me. I started by building a module that would convert numbers to their corresponding word and then decided to use a hashmap to keep track of the frequency of each letter in the string, I then wrote a method that would take my letter hash and turn it into a sentence formatted like the one in the example- it was at this point that I got stuck and had to do quite a bit of research on the problem to understand how to solve it. 

http://web.archive.org/web/20060830020320/http://www.cs.indiana.edu/~tanaka/GEB/pangram.txt was particularly useful in that regard with their explanation on how the robisonizing method worked. 

Solving this took me somewhere in the neighborhood of 6 to 7 hours as I got a bit stumped at how to solve it at first. One thing that bugs me a bit about my solution is how variable the solving time seems to be as it is basically an educated guess and check. In the two sample outputs I included you can see the variance. Sometimes it fails to converge on the solution as well- one possible way to fix this would be to reset the guess hash back to the original seed if the number of iterations gets too high..
Overall, it was a fun challenge to solve and it definitely got me to think a lot.